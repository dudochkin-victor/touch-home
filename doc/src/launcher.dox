/*! \page launcher Launcher

\section mainmenu Main menu

The main menu is a central place from where the user can launch applications and bookmarks. Main menu entries are defined in <a href="http://standards.freedesktop.org/desktop-entry-spec/latest/">freedesktop.org desktop entry files</a> with the <tt>.desktop</tt> extension. Not all features of the desktop entry specification are supported. The supported features are listed in this document.

The system wide desktop entry files must be installed to <tt>/usr/share/applications</tt>. User specific desktop entry files can be installed to <tt>$HOME/.local/share/applications</tt>. However, they will not override system-wide desktop files with the same name in <tt>/usr/share/applications</tt>.

Each desktop entry file must define values for the \e Icon, \e Name and \e Type keys.

The \e Icon must specify the absolute path or ID of the icon that is used to represent the item in the main menu. If an icon ID is used the icon will first be located as described in the <a href="http://freedesktop.org/wiki/Standards/icon-theme-spec">Icon Theme Specification</a>. If an icon with the given ID is not found from those locations the icon is taken from the MeeGo Touch theme with the given ID. 

The \e Name must be set to the unlocalized name of the item. Localized names can be additionally provided. See \c MDesktopEntry documentation how to define localized names.

For applications the \e Type must be set to \e Application. For bookmarks the \e Type must be set to \e Link.

\subsection mainmenuapplications Applications in main menu

In addition to the \e Icon, \e Name and \e Type keys, each application desktop entry file must define a value for the \e Exec key.

The \e Exec key defines an application binary to be launched. However there is a more preferred way to specify what will be launched from the home screen: the \e X-Maemo-Service key. This key defines the service to be launched.

Note that even though the \e X-Maemo-Service key is specified, the \e Exec key needs to be specified as well. If both an \e X-Maemo-Service and \e Exec key are specified, the \e Exec key is ignored.

The purpose of the \e X-Maemo-Service key is to ensure that there be only a single instance of any application. Successive launch attempts will result in the first instance becoming visible. Note that, for an application to be launched using the \e X-Maemo-Service key, the application should also define a .service file. See \c MApplicationService documentation for more information.

To be able to launch multiple instances of an application, the application needs to specify their own class that derives from \c MApplicationService and implements custom behaviour. See \c MApplicationService documentation for more information. This is also true if the \e Exec key is specified.

The home screen main menu respects the \e OnlyShowIn and \e NotShowIn keys of desktop entry files. The correct value is \e X-MeeGo. So in order to have the application \b only visible in Duihomescreen main menu (and not e.g. KDE or GNOME) one can specify \e OnlyShowIn=X-MeeGo;. And if the application should \b not be visible in Duihomescreen main menu one can specify \e NotShowIn=X-MeeGo;.

An example application desktop entry file might look like this:

\verbatim
[Desktop Entry]
Type=Application
Name=My application
Exec=/usr/bin/my-app
Icon=my_app_icon_id
OnlyShowIn=X-MeeGo;
\endverbatim

\subsection mainmenubookmarks Bookmarks in main menu

As with all desktop files, system-wide bookmarks installed from packages can be placed to <tt>/usr/share/applications</tt>. However, user specific bookmarks should be placed in <tt>$HOME/.local/share/applications</tt>.

In addition to the \e Icon, \e Name and \e Type keys, each bookmark desktop entry file must define a value for the \e URL key.

The \e URL key defines an URL to be launched.

Example desktop entry file might look like this:

\verbatim
[Desktop Entry]
Type=Link
Name=nokia.com
URL=http://www.nokia.com/
Icon=my_bookmark_icon_id
\endverbatim

\subsection dbusinterface D-Bus interface for showing button on a launcher

%Launcher provides a D-Bus API, through which user can be transferred to an application's launcher button. showLauncher method takes an application's desktop file name as an argument in format "filename.desktop". The desktop file can be given in a path format, but only the file name is used when searching for the button. If an empty string is given as a parameter the launcher is only opened. Giving a desktop file that doesn't exist does nothing.

D-Bus interface:
\verbatim
<interface name="com.meego.core.HomeScreen">
    <method name="showLauncher">
        <arg name="desktopFileEntry" type="s" direction="in"/>
    </method>
</interface>
\endverbatim

\subsection installation-progress Showing installation and update progress of application in launcher and quicklaunchbar

ApplicationPackageMonitor listens to dbus signals from Package Manager and watches <tt>/usr/share/applications/installer-extra</tt> folder to receive info on package installation states and progress. Relevant information is signalled to %Launcher and %QuickLaunchBar, and state and progress information is stored for the button that represents this package. If we are installing a new package, a placeholder button is added to %Launcher. %Launcher buttons reflect the state and progress by using different icons and a progress indicator.

Note: %Launcher assumes that <tt>installer-extra</tt> folder is created before starting the home screen. Otherwise, %Launcher doesn't react to entries in the <tt>installer-extra</tt> folder before next startup.

\see

- The <a href="http://standards.freedesktop.org/desktop-entry-spec/latest/">freedesktop.org desktop entry standard</a>

*/
